<% #TODO: password confirmation, salted hash in DB and star input, even if password is not secret anyway?
%>
<% #TODO: Change Model logic to key-value pairs.
# Difficulties: 
# - One view will have to change several setting objects at once then.
# - Different setting objects may need different views (checkbox vs. text field)
%>

<%= form_for @setting, html: {class: "form-horizontal"} do |setting_form| %>

<% if @setting.errors.any? %>
<div id="error_explanation">
	<h2><%= pluralize(@setting.errors.count, "error") %> prohibited
	this setting from being saved:</h2>
	<ul>
		<% @setting.errors.full_messages.each do |msg| %>
		<li>
			<%= msg %>
		</li>
		<% end %>
	</ul>
</div>
<% end %>


<%if(@setting.name == "http_authentication")%>
<div class="form-group">
	<div class="col-sm-offset-2 col-sm-10">
		Active: <%= setting_form.check_box :active, 
		:onchange => "javascript:$('#httpcredentials :input').attr('disabled',!this.checked)" %>
		<%= render 'http_auth_info' %>
	</div>
</div>
<div id="httpcredentials">
	<div class="form-group">
		<label class="col-sm-2 control-label">User: </label>
		<div class="col-sm-10">
			<%= setting_form.text_field :attribute1 %>
		</div>
	</div>
	<div class="form-group">
		<label class="col-sm-2 control-label">Password: </label>
		<div class="col-sm-10">
			<%= setting_form.text_field :attribute2 %>
		</div>
	</div>
</div>
<% end %>


<%= link_to "Cancel", :back, {:class=>"btn btn-default"} %>
<%= setting_form.submit 'Save', class: "btn btn-default" %>

<% end %>